<!-- src/pages/{{ module_name }}/{{ table_name|replace('_', '-')|replace('lc-'+module_name+'-', '') }}/edit.vue -->
<template>
    <enum-provider url="/common/options" :fields="[
    'approvalStatusOptions',
  {%- for field in form_fields %}
  {%- if field.form_type == 'enum' %}
    '{{ field.field|snake_to_camel }}Options',
  {%- elif field.form_type == 'data-id' %}
    '{{ field.props.field|snake_to_camel }}Options',
  {%- else %}
  {%- endif %}
  {%- endfor %}
  ]">
        <base-edit
                v-model="formData"
                :fields="formFields"
                :rules="rules"
                :title="isEdit ? '编辑{{ table_comment }}' : '添加{{ table_comment }}'"
                :mode="props.mode"
                :visible="props.visible"
                @update:visible="$emit('update:visible', $event)"
                @cancel="$emit('cancel')"
                @success="$emit('success', $event)"
                :id="currentId"
                :api="API"
                :on-success="handleSuccess"
        />
    </enum-provider>
</template>

<script lang="ts" setup>
import {ref, reactive, onMounted, computed, PropType} from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { ElMessage } from 'element-plus'
import type { FormRules } from 'element-plus'
import { useGlobalProperties } from "@/composables/useGlobalProperties"
import type { ApiResponse, OptionItem } from '@/types/common'
import EnumProvider from "@/components/enum/enum-provider.vue"
import BaseEdit from "@/components/base-edit.vue"

const props = defineProps({
  visible: {
    type: Boolean,
    required: false,
  },
  id: {
    type: Number,
    required: false,
    default: null,
  },
  mode: {
    type: String as PropType<'dialog' | 'page'>,
    default: 'page',
  },
  query: {
    type: Object,
    required: false,
  },
  onSuccess: {
    type: Function as PropType<(row: Object) => void>,
    required: false,
  },
});

defineOptions({
  inheritAttrs: false
})

const router = useRouter()
const route = useRoute()
const { $lc } = useGlobalProperties()

const API = {
  read: '/{{ module_name }}.{{ class_name }}/read',
  update: '/{{ module_name }}.{{ class_name }}/update',
  create: '/{{ module_name }}.{{ class_name }}/create',
}

const isEdit = computed(() => {
  if (props.mode === 'dialog') {
    return !!props.id
  }
  return !!props.id || !!route.query.id
})

const currentId = computed(() => props.id || Number(route.query.id))

{%- if has_area %}
const areaData = reactive({
  city_code: null,
  district_code: null,
  street_code: null
})
{%- endif %}

const formData = reactive({
{%- for field in form_fields %}
    {{ field.field }}: {% if field.form_type in ['enum', 'data-id'] %}null
    {%- elif field.form_type == 'area-selector' %}{}
    {%- elif field.form_type == 'select-file-multiple' or field.form_type == 'checkbox-group' %}[]
    {%- elif field.form_type == 'switch' %}1
    {%- elif field.base_type == 'number' %}0
    {%- elif field.base_type == 'string' %}''
    {%- else %}null
    {%- endif %},
{%- endfor %}
})

const formFields = [
  {% for field in form_fields -%}
    { label: '{{ field.label }}', prop: '{{ field.field }}', type: '{{ field.form_type }}',
      {%- if field.required -%}required: true, {%- endif -%}
      {%- if field.disabled -%}disabled: {{ field.disabled }}, {%- endif -%}
      {%- if field.readonly -%}readonly: {{ field.readonly }}, {%- endif -%}
      props: { {%- if field.form_type == 'number' -%}
          {%- if field.precision is defined -%}precision: {{ field.precision }}, {%- endif -%}
          {%- if field.step is defined -%}step: {{ field.step }}, {%- endif -%}
          {%- if field.min is defined -%}min: {{ field.min }}, {%- endif -%}
        {%- endif -%}
        {%- if field.form_type == 'area-selector' -%}startLevel: 2, endLevel: 4, parentCode: '440000000000', {%- endif -%}
        {%- if field.form_type == 'enum' -%}field: '{{ field.field|snake_to_camel }}Options', clearable: true, {%- endif -%}
        {%- if field.form_type == 'data-id' -%}field: '{{ field.props.field|snake_to_camel }}Options', clearable: true, {%- endif -%}
        {%- if field.form_type == 'textarea' -%}rows: {{ field.rows|default(4) }}, maxlength: 500, showWordLimit: true, {%- endif -%}
        {%- if field.form_type == 'select-image' -%}
          type: '{{ field.props.type }}', {%- if field.props.multiple -%}multiple: true, limit: {{ field.props.limit|default(15) }}, {%- endif -%}
        {%- endif -%}
        {%- if field.base_type == 'date' -%}type: 'date', {%- endif -%}
        {%- if field.base_type == 'datetime' -%}type: 'datetime', valueFormat: 'YYYY-MM-DD HH:mm:ss', format: 'YYYY-MM-DD HH:mm:ss', {%- endif -%}
        class: 'w-[{{ field.width|default(320) }}px]', placeholder: '请{{ '选择' if field.form_type in ['enum', 'select', 'area-selector', 'date-picker', 'time-picker', 'data-id'] else '输入' }}{{ field.label }}',} },
  {% endfor -%}
]

const rules: FormRules = {
  {% for field in form_fields %}
    {%- if field.required -%}
      {{ field.field }}: [
        {%- if field.form_type == 'area-selector' -%}
          { required: true, validator: (rule, value, callback) => { if (!value) { callback(new Error('请选择城市')); return; } const { city_code, district_code, street_code } = value; if (!city_code) { callback(new Error('请选择城市')); return; } if (!district_code) { callback(new Error('请选择区县')); return; } if (!street_code) { callback(new Error('请选择街道')); return; } formData.city_code = city_code; formData.district_code = district_code; formData.street_code = street_code; callback(); }, trigger: ['change', 'blur'] }
        {%- else -%}
          { required: true, message: '请{{ '选择' if field.form_type in ['enum', 'select', 'area-selector', 'select-file', 'data-id'] else '输入' }}{{ field.label }}', trigger: '{{ 'change' if field.form_type in ['select', 'enum', 'date-picker', 'area-selector', 'select-file', 'data-id'] else 'blur' }}' }
        {%- endif -%}
      ],
    {% endif -%}
  {%- endfor -%}
}

const loadData = async () => {
  if (!currentId.value) return
  const res = await $lc.get<ApiResponse<any>>(API.read, { id: currentId.value })
  if (res.code === 1 && res.data) {
    Object.assign(formData, res.data)
  }
}

const handleSubmit = async () => {
    const url = isEdit.value ? API.update : API.create
    const data = isEdit.value ? { ...formData, id: currentId.value } : formData
    return await $lc.submit<ApiResponse<null>>(url, data)
}

const handleSuccess = (data:Object) =>{
  props.onSuccess?.(data)
}

onMounted(async () => {
  if (currentId.value) {
    await loadData()
  }
})
</script>
{{ '' }}
