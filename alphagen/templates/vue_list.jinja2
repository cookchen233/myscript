<!-- src/pages/{{ module_name }}/{{ table_name|replace('_', '-')|replace('lc-'+module_name+'-', '') }}/list.vue -->
<script lang="ts" setup>
import { computed, PropType, reactive, ref } from 'vue'
import { Search } from '@element-plus/icons-vue'
import BaseList from '@/components/base-list.vue'
import EnumSelector from "@/components/enum/enum-selector.vue"
import EnumLabel from "@/components/enum/enum-label.vue"
import FileLabel from "@/components/file-label.vue";
import EnumDropdown from "@/components/enum/enum-dropdown.vue";
import EnumStatusLabel from "@/components/enum/enum-status-label.vue"
import {{ class_name }}Edit from './edit.vue'
import EnumProvider from "@/components/enum/enum-provider.vue"
import {useGlobalProperties} from "@/composables/useGlobalProperties";
import {useRoute} from "vue-router";
import {ElMessage, ElMessageBox} from "element-plus";
//import XxList from '../enroll/list.vue'


const props = defineProps({
  query: {
    type: Object,
    required: false,
  },
  onEditSuccess: {
    type: Function as PropType<(row:Object) => void>,
    required: false
  },
  mode: {
    type: String as PropType<'dialog' | 'page'>,
    default: 'page'
  }
})

const { $lc } = useGlobalProperties()
const route = useRoute()

const API = {
  list: '/{{ module_name }}.{{ class_name }}/list',
  delete: '/{{ module_name }}.{{ class_name }}/delete',
  update: '/{{ module_name }}.{{ class_name }}/update',
  {%- if has_delete %}
  restore: '/{{ module_name }}.{{ class_name }}/restore',
  restoreBatch: '/{{ module_name }}.{{ class_name }}/restoreBatch',
  {%- endif %}
  updateBatch: '/{{ module_name }}.{{ class_name }}/updateBatch',
}

const baseListRef = ref<InstanceType<typeof BaseList> | null>(null)
const showRestore = computed(() => query.is_trashed)

// 查询条件
const query = reactive({
  keywords: '',
  {%- for field in search_fields %}
  {%- if field.type == 'daterange' or field.type == 'numberrange' %}
  {{ field.field }}_range: [],
  {%- else %}
  {{ field.field }}: null,
  {%- endif %}
  {%- endfor %}
  {%- if has_delete %}
  is_trashed: false,
  {%- endif %}
  ...props.query
})

const resetQuery = (newVal) => {
  Object.assign(query, {
    ...newVal
  })
}

// 弹窗控制
const xxDialogVisible = ref(false)
const xxQuery = ref<Object | null>(null)
const handleXxDialogOpen = (row: any) => {
  xxDialogVisible.value = true
  xxQuery.value = {member_id:row.member_id}
}

const handleUpdate = async (row: any, updateData: any) => {
  const url = API.update
  const data = {
    id: row.id,
    ...updateData
  }
  await $lc.submit(url, data)
  onEditSuccess?.(data)
}
const onEditSuccess = (data:Object)=>{
  baseListRef.value.reload()
  props.onEditSuccess?.(data)
  xxDialogVisible.value = false
}

// 批量更新
const handleBatchUpdate = async (updateData: any, message = '确定要批量更新吗？') => {
  const selection = baseListRef.value?.getSelectedRows()
  if (!selection?.length) {
    ElMessage.warning('请选择要更新的记录')
    return
  }

  try {
    await ElMessageBox.confirm(message)
    const dataSet = selection.map(item => ({
      id: item.id,
      ...updateData
    }))
    const res = await $lc.post(API.updateBatch, dataSet)
    if (res.code === 1) {
      ElMessage.success('批量更新成功')
      baseListRef.value?.reload()
    }
  } catch (e) {
    if (e !== 'cancel') {
      console.error(e)
    }
  }
}

</script>

<template>
    <enum-provider url="/common/options" :fields="[
    'approvalStatusOptions',
  {%- for field in table_fields %}
  {%- if field.type == 'enum' %}
    '{{ field.field|snake_to_camel }}Options',
  {%- elif field.type == 'data-id' %}
    '{{ field.field[:-3]|snake_to_camel }}Options',
  {%- endif %}
  {%- endfor %}
  ]">
    <BaseList
    :api="API"
    :edit-component="{{ class_name }}Edit"
    :on-edit-success="onEditSuccess"
    :query="query"
    :reset-query="resetQuery"
    ref="baseListRef"
    title="{{ table_comment }}"
    :can-delete-="false"
    :can-add-="false"
    :selectable-="true"
    :opts-="[
      {
        txt: '审批记录',
        type: 'warning',
        event: handleXxDialogOpen,
      }
    ]"
    :show-search="!props.query"
    >
      <template #search-items>
        <el-form-item label="搜索" class="mt-[20px]">
          <el-input v-model="query.keywords" class="w-[200px]" placeholder="请输入关键字" :prefix-icon="Search" clearable />
        </el-form-item>

        {%- for field in search_fields %}
        {%- if field.field != 'keywords' %}
        <el-form-item label="{{ field.label }}" class="mt-[20px]">
          {%- if field.type == 'enum' %}
          <enum-selector v-model="query.{{ field.field }}" field="{{ field.field|snake_to_camel }}Options" class="w-[{{ field.width|default(200) }}px]" clearable :filterable="true" />
          {%- elif field.type == 'data-id' %}
          <enum-selector v-model="query.{{ field.field }}" field="{{ field.field[:-3]|snake_to_camel }}Options" class="w-[{{ field.width|default(200) }}px]" clearable :filterable="true" />
          {%- elif field.type == 'daterange' %}
          <el-date-picker v-model="query.{{ field.field }}_range" type="daterange" range-separator="至" start-placeholder="开始日期" end-placeholder="结束日期" value-format="YYYY-MM-DD" class="w-[360px]" clearable />
          {%- elif field.type == 'numberrange' %}
          <el-input-number-range v-model="{{ field.field }}Range" @change="handle{{ field.field|snake_to_camel(True) }}RangeChange" class="w-[260px]" {% if field.min is defined %}:min="{{ field.min }}"{% endif %} {% if field.precision is defined %}:precision="{{ field.precision }}"{% endif %} clearable />
          {%- elif field.type == 'switch' %}
          <el-select v-model="query.{{ field.field }}" class="w-[100px]" clearable placeholder="请选择"><el-option :value="1" label="开启" /><el-option :value="0" label="关闭" /></el-select>
          {%- else %}
          <el-input-number v-model="query.{{ field.field }}" class="!w-[{{ field.width|default(120) }}px]" placeholder="请输入{{ field.label }}" {% if field.min is defined %}:min="{{ field.min }}"{% endif %} {% if field.precision is defined %}:precision="{{ field.precision }}"{% endif %} clearable />
          {%- endif %}
        </el-form-item>
        {%- endif %}
        {%- endfor %}
      </template>

      <template #extra-buttons>
        {%- for button in batch_buttons %}
        <el-button type="{{ button.type }}" @click='handleBatchUpdate({{ button.update_data | tojson }}, "{{ button.confirm_message }}")'>{{ button.text }}</el-button>
        {%- endfor %}
      </template>
      {%- for field in table_fields %}
      <el-table-column prop="{{ field.field }}" label="{{ field.label }}" {% if field.width %} width="{{ field.width }}"{% endif %}{% if field.align %} align="{{ field.align }}"{% endif %}{% if field.type == 'text' %} show-overflow-tooltip{% endif %}>
        {%- if field.template %}
        <template #default="{row}">
          {%- if field.type == 'enum' %}
          <enum-label field="{{ field.field|snake_to_camel }}Options" :value="row.{{ field.field }}"/>
          {%- elif field.type == 'data-id' %}
          <enum-label field="{{ field.field[:-3]|snake_to_camel }}Options" :value="row.{{ field.field }}"/>
          {%- elif field.type == 'money' %}
          <span class="text-orange-500">¥{{ '{{ row.' + field.field + ' }}' }}</span>
          {%- elif field.type == 'image' %}
          <file-label v-if="row.{{ field.field }}" :file-url="row.{{ field.field }}" />
          {%- elif field.type=='file' %}
          <file-label v-if="row.{{ field.field }}" :file-url="row.{{ field.field }}" height="60px" />
          {%- elif field.type == 'switch2' %}
          <el-tag :type="row.{{ field.field }} ? 'success' : 'danger'" size="small">{{ '{{ row.' + field.field + ' ? "" : "" }}' }}</el-tag>
          {%- elif field.type == 'switch' %}
          <el-switch v-model="row.{{ field.field }}" :active-value="1" :inactive-value="0" @change="(value) => handleUpdate(row, { {{ field.field }}: value})" />
          {%- elif field.type == 'textarea' %}
          <el-tooltip :content="row.{{ field.field }}" placement="top" :hide-after="2000"><span>{{ '{{ row.' + field.field + ' }}' }}</span></el-tooltip>
          {%- endif %}
        </template>
      {% endif -%}
      </el-table-column>
      {%- endfor %}

      {%- if has_delete %}
      <el-table-column prop="delete_time" label="删除时间" width="180" v-if="showRestore"/>
      {%- endif %}
    </BaseList>
  </enum-provider>
  <!-- <el-dialog v-model="xxDialogVisible" title="列表" width="80%" destroy-on-close > -->
     <!-- <XxList :query="xxQuery" :on-edit-success="onEditSuccess" /> -->
  <!-- </el-dialog> -->
</template>

