<!-- src/pages/{{ module_name }}/{{ table_name|replace('_', '-')|replace('lc-'+module_name+'-', '') }}/list.vue -->
<template>
    <enum-provider url="/common/options" :fields="[
    'approvalStatusOptions',
  {%- for field in table_fields %}
  {%- if field.display_type == 'enum' %}
    '{{ field.field|snake_to_camel }}Options',
  {%- elif field.display_type == 'data-id' %}
    '{{ field.data_id_props.options_name|snake_to_camel }}Options',
  {%- endif %}
  {%- endfor %}
  ]">
        <BaseList
                :api="API"
                :edit-component="{{ class_name }}Edit"
                :on-edit-success="onEditSuccess"
                :query="query"
                :reset-query="resetQuery"
                ref="baseListRef"
                title="{{ table_comment }}"
                :can-delete_="false"
                :can-edit_="false"
                :can-add_="false"
                :selectable="canBatch || canExport"
                :opts_="[
      {
        txt: '审批记录',
        type: 'warning',
        event: handleXxDialogOpen,
      },
      {
        txt: '结算',
        type: 'warning',
        disabled:row=>row.id === 0,
        event: handleOperation,
      }
    ]"
                :show-search="!props.query"
        >
            <template #toolbar>
                <el-button-group v-if="canExport">
                    <el-button type="primary" @click="handleExport" class="border-none pr-1">
                        导出
                    </el-button>
                    <el-dropdown trigger="click" :hide-on-click="false">
                        <el-button type="primary" class="!w-6 border-none pl-0 pr-1">
                            <el-icon>
                                <arrow-down/>
                            </el-icon>
                        </el-button>
                        <template #dropdown>
                            <el-dropdown-menu>
                                <el-dropdown-item v-for="(config, key) in columns" :key="key" :disabled="true">
                                    <el-checkbox
                                        :model-value="config.visible"
                                        @change="(val: boolean) => config.visible = val"
                                        @click.stop
                                    >
                                        {{ '{{ config.label }}' }}
                                    </el-checkbox>
                                </el-dropdown-item>
                            </el-dropdown-menu>
                        </template>
                    </el-dropdown>
                </el-button-group>
            </template>

            <template #search-items>
                <el-form-item label="搜索" class="mt-[20px]">
                    <el-input v-model="query.keywords" class="w-[200px]" placeholder="请输入关键字" :prefix-icon="Search" clearable />
                </el-form-item>

                {%- for field in search_fields %}
                    {%- if field.field != 'keywords' %}
                        <el-form-item label="{{ field.label }}" class="mt-[20px]">
                            {%- if field.search_type == 'enum' %}
                                <enum-selector v-model="query.{{ field.field }}" field="{{ field.field|snake_to_camel }}Options" class="w-[{{ field.width|default(200) }}px]" clearable :filterable="true" />
                            {%- elif field.search_type == 'data-id' %}
                                <enum-selector v-model="query.{{ field.field }}" field="{{ field.data_id_props.options_name|snake_to_camel }}Options" class="w-[{{ field.width|default(200) }}px]" clearable :filterable="true" />
                            {%- elif field.search_type == 'daterange' %}
                                <el-date-picker v-model="query.{{ field.field }}_range" type="daterange" range-separator="至" start-placeholder="开始日期" end-placeholder="结束日期" value-format="YYYY-MM-DD" class="w-[360px]" clearable />
                            {%- elif field.search_type == 'numberrange' %}
                                <el-input-number-range v-model="{{ field.field }}_range" @change="handle{{ field.field|snake_to_camel(True) }}RangeChange" class="w-[260px]" {% if field.min is defined %}:min="{{ field.min }}"{% endif %} {% if field.precision is defined %}:precision="{{ field.precision }}"{% endif %} clearable />
                            {%- elif field.search_type == 'switch' %}
                                <el-select v-model="query.{{ field.field }}" class="w-[100px]" clearable placeholder="请选择"><el-option :value="1" label="开启" /><el-option :value="0" label="关闭" /></el-select>
                            {%- else %}
                                <el-input-number v-model="query.{{ field.field }}" class="!w-[{{ field.width|default(120) }}px]" placeholder="请输入{{ field.label }}" {% if field.min is defined %}:min="{{ field.min }}"{% endif %} {% if field.precision is defined %}:precision="{{ field.precision }}"{% endif %} clearable />
                            {%- endif %}
                        </el-form-item>
                    {%- endif %}
                {%- endfor %}
            </template>

            <template #extra-buttons>
                <template v-if="canBatch">
                {%- for button in batch_buttons %}
                    <el-button type="{{ button.type }}" @click='handleBatchUpdate({{ button.update_data | tojson }}, "{{ button.confirm_message }}")'>{{ button.text }}</el-button>
                {%- endfor %}
                </template>
            </template>

            <template v-for="(config, key) in columns" :key="key">
                <el-table-column
                    v-if="config.visible && !['create_time'].includes(config.prop)"
                    :prop="config.prop"
                    :label="config.label"
                    :width="config.width"
                    :align="config.align"
                    :sortable="config.sortable ? 'custom' : false"
                >
                    <template #default="scope" v-if="config.render">
                        <component :is="config.render(scope)" />
                    </template>
                </el-table-column>
            </template>

            {%- if has_delete %}
                <el-table-column prop="delete_time" label="删除时间" width="180" v-if="showRestore"/>
            {%- endif %}
        </BaseList>
    </enum-provider>
    <!-- <el-dialog v-model="xxDialogVisible" title="列表" width="80%" destroy-on-close > -->
    <!-- <XxList :query="xxQuery" :on-edit-success="onEditSuccess" /> -->
    <!-- </el-dialog> -->

    <!-- 操作弹窗 -->
    <el-dialog v-model="operationDialogVisible" title="操作" width="500px" destroy-on-close>
        <el-form :model="operationForm" label-width="100px">
            <el-form-item label="交车照片">
                <select-file v-model="operationForm.reward_images" multiple type="image"/>
            </el-form-item>
            <el-form-item label="备注">
                <el-input v-model="operationForm.reward_remark" type="textarea" :rows="3" placeholder="请输入备注"/>
            </el-form-item>
        </el-form>
        <template #footer>
            <el-button @click="operationDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="operationSubmit">确定</el-button>
        </template>
    </el-dialog>

</template>

<script lang="ts" setup>
import { computed, h, PropType, reactive, ref } from 'vue'
import { Search, ArrowDown } from '@element-plus/icons-vue'
import BaseList from '@/components/base-list.vue'
import MemberInfo from "@/components/member-info.vue";
import EnumSelector from "@/components/enum/enum-selector.vue"
import EnumLabel from "@/components/enum/enum-label.vue"
import FileLabel from "@/components/file-label.vue";
import EnumDropdown from "@/components/enum/enum-dropdown.vue";
import EnumStatusLabel from "@/components/enum/enum-status-label.vue"
import {{ class_name }}Edit from './edit.vue'
import EnumProvider from "@/components/enum/enum-provider.vue"
import {useGlobalProperties} from "@/composables/useGlobalProperties";
import {useRoute} from "vue-router";
import {ElMessage, ElMessageBox} from "element-plus";
//import XxList from '../enroll/list.vue'


const props = defineProps({
  query: {
    type: Object,
    required: false,
  },
  onEditSuccess: {
    type: Function as PropType<(row:Object) => void>,
    required: false
  },
  mode: {
    type: String as PropType<'dialog' | 'page'>,
    default: 'page'
  }
})

const { $lc } = useGlobalProperties()
const route = useRoute()

const {MODE, VITE_PROXY_TARGET} = import.meta.env
const token = $lc.db.get("admin_token")
const site_id=$lc.db.get("site_id")
const headers={"admin-token": token, "site-id": site_id}

const API = {
  list: '/{{ module_name }}.{{ class_name }}/list',
  delete: '/{{ module_name }}.{{ class_name }}/delete',
  update: '/{{ module_name }}.{{ class_name }}/update',
  {%- if has_delete %}
  restore: '/{{ module_name }}.{{ class_name }}/restore',
  restoreBatch: '/{{ module_name }}.{{ class_name }}/restoreBatch',
  {%- endif %}
  updateBatch: '/{{ module_name }}.{{ class_name }}/updateBatch',
  export: VITE_PROXY_TARGET + '/admin/{{ module_name }}.{{ class_name }}/list',
  audit: '/{{ module_name }}.{{ class_name }}/audit',
  settle: '/{{ module_name }}.{{ class_name }}/settle',
}

const baseListRef = ref<InstanceType<typeof BaseList> | null>(null)
const showRestore = computed(() => query.is_trashed)
const canBatch = ref(true)
const canExport = ref(true)

// 查询条件
const query = reactive({
  keywords: '',
  {%- for field in search_fields %}
  {%- if field.search_type == 'daterange' or field.search_type == 'numberrange' %}
  {{ field.field }}_range: [],
  {%- else %}
  {{ field.field }}: null,
  {%- endif %}
  {%- endfor %}
  {%- if has_delete %}
  is_trashed: false,
  {%- endif %}
  ...props.query
})

const resetQuery = (newVal) => {
  Object.assign(query, {
    ...newVal
  })
}

// 弹窗控制
const xxDialogVisible = ref(false)
const xxQuery = ref<Object | null>(null)
const handleXxDialogOpen = (row: any) => {
  xxDialogVisible.value = true
  xxQuery.value = { {{ alias_name }} :row.id}
}

const handleUpdate = async (row: any, updateData: any) => {
  const url = API.update
  const data = {
    id: row.id,
    ...updateData
  }
  await $lc.submit(url, data)
  onEditSuccess?.(data)
}
const onEditSuccess = (data:Object)=>{
  baseListRef.value.reload()
  props.onEditSuccess?.(data)
  xxDialogVisible.value = false
}

// 批量更新
const handleBatchUpdate = async (updateData: any, message = '确定要批量更新吗？') => {
  const selection = baseListRef.value?.getSelectedRows()
  if (!selection?.length) {
    ElMessage.warning('请选择要更新的记录')
    return
  }

  try {
    await ElMessageBox.confirm(message)
    const dataSet = selection.map(item => ({
      id: item.id,
      ...updateData
    }))
    const res = await $lc.post(API.updateBatch, dataSet)
    if (res.code === 1) {
      ElMessage.success('批量更新成功')
      baseListRef.value?.reload()
    }
  } catch (e) {
    if (e !== 'cancel') {
      console.error(e)
    }
  }
}

const handleExport = () => {
  const selection = baseListRef.value?.getSelectedRows()
  if (!selection?.length) {
    ElMessage.warning('请先选择要导出的记录')
    return
  }

  // 构建基础参数
  const baseParams = new URLSearchParams({
    export: '1',
    admin_token: token,
    site_id: site_id
  })

  // 添加选中的ID
  selection.forEach(item => {
    baseParams.append('id[]', item.id)
  })

  // 添加可见列及其中文标签
  Object.entries(columns.value)
    .filter(([_, config]) => config.visible)
    .forEach(([key, config]) => {
      const exportKey = config.export_key || key
      baseParams.append('column_keys[]', exportKey)
      baseParams.append('column_names[]', config.label)
    })

  // 添加排序参数
  if (query.sort_field) baseParams.append('sort_field', query.sort_field)
  if (query.sort_order) baseParams.append('sort_order', query.sort_order)

  // 构建完整URL
  const exportUrl = `${API.export}?${baseParams.toString()}`

  // 触发导出
  window.location.href = exportUrl
}

const handleOperation = async (row: any) => {
    try {
        await ElMessageBox.confirm('确定结算吗？')
        const url = API.settle
        const data = {id: row.id,}
        await $lc.submit(url, data)
        onEditSuccess?.(data)
    } catch (e) {
        if (e !== 'cancel') {
            console.error(e)
        }
    }
}

// 操作弹窗
const currentRow = ref<any>(null)
const operationDialogVisible = ref(false)
const operationForm = reactive({})

const handleTransfer = (row: any) => {
    currentRow.value = row
    operationForm.value = currentRow.value
    operationDialogVisible.value = true
}

const operationSubmit = async () => {
    await $lc.submit(API.audit, operationForm)
    operationDialogVisible.value = false
    baseListRef.value?.reload()
}

// 列配置
const columns = ref({
  {%- for field in table_fields %}
  {{ field.field }}: {
    visible: true,
    label: '{{ field.label }}',
    prop: '{{ field.field }}'{% if field.width %},
    width: '{{ field.width }}'{% endif %}{% if field.align %},
    align: '{{ field.align }}'{% endif %}{% if field.sortable %},
    sortable: {{ field.sortable|tojson }}{% endif %}{% if field.export_key %},
    export_key: '{{ field.export_key }}'{% endif %}{% if field.display_type == 'enum' or field.display_type == 'data-id' or field.display_type == 'money' or field.display_type == 'image' or field.display_type == 'file' or field.display_type == 'switch' or field.display_type == 'switch2' or field.display_type == 'textarea' or field.field == 'member_id' %},
    render: (scope: { row: any }) => {
      {%- if field.display_type == 'enum' %}
      return h(EnumLabel, {
        field: '{{ field.field|snake_to_camel }}Options',
        value: scope.row.{{ field.field }}
      })
      {%- elif field.display_type == 'data-id' %}
      return h(EnumLabel, {
        field: '{{ field.data_id_props.options_name|snake_to_camel }}Options',
        value: scope.row.{{ field.field }}
      })
      {%- elif field.field == 'member_id' %}
      return h(MemberInfo, {
        member: scope.row.member || scope.row
      })
      {%- elif field.display_type == 'money' %}
      return h('span', { class: 'text-orange-500' }, `¥${scope.row.{{ field.field }}}`)
      {%- elif field.display_type == 'image' or field.display_type == 'file' %}
      if (!scope.row?.{{ field.field }}) return null
      return h(FileLabel, {
        fileUrl: scope.row.{{ field.field }},
        height: '60px'
      })
      {%- elif field.display_type == 'switch2' %}
      return h(ElTag, {
        type: scope.row.{{ field.field }} ? 'success' : 'danger',
        size: 'small'
      }, () => scope.row.{{ field.field }} ? '是' : '否')
      {%- elif field.display_type == 'switch' %}
      return h(ElSwitch, {
        modelValue: scope.row.{{ field.field }},
        activeValue: 1,
        inactiveValue: 0,
        onChange: (value) => handleUpdate(scope.row, { {{ field.field }}: value})
      })
      {%- elif field.display_type == 'textarea' %}
      return h(ElTooltip, {
        content: scope.row.{{ field.field }},
        placement: 'top',
        hideAfter: 2000
      }, () => h('span', null, scope.row.{{ field.field }}))
      {%- endif %}
    }{% endif %}
  },
  {%- endfor %}
})
</script>
{{ '' }}
