<?php
declare(strict_types=1);

namespace app\api\controller{% if module_name %}\{{ module_name }}{% endif %};
{% if module_name %}
use app\api\controller\CrudController;{% endif %}

use app\common\model{% if module_name %}\{{ module_name }}{% endif %}\{{class_name}}Model;
use app\common\exception\DataNotFound;
use think\response\Json;
use think\db\Query;
use think\Paginator;

/**
 * {{table_comment}}
 * @property {{class_name}}Model $model
*/
class {{class_name}} extends CrudController
{
    protected function initialize()
    {
        $this->model = new {{class_name}}Model();
        parent::initialize();
        $id = input('id');
        if ($id) {
            $model = $this->model->find($id);
            if (!$model) {
                throw new DataNotFound();
            }
            $this->model = $model;
        }
    }

    /**
    * 查询条件(list+read)
    */
    protected function applyListQueryConditions(Query $query): static
    {
        {% if has_member_id %}$query->where("member_id", $this->member_id);{% endif %}
        return $this;
    }

    /**
    * 处理列表结果
    */
    protected function processListResult(Paginator $dataset)
    {
    }

    /**
    * 处理详情结果
    */
    protected function processReadResult(&$data)
    {
    }

    /**
    * 创建数据检查
    */
    protected function checkCreateData($data)
    {
    }

    /**
    * 更新数据检查
    */
    protected function checkUpdateData($data)
    {
    }

    /**
    * 处理创建数据(插入前)
    */
    protected function processCreateData(array $data): array
    {
        return $data;
    }

    /**
    * 处理更新数据(更新前)
    */
    protected function processUpdateData(array $data, $oldModel): array
    {
        return $data;
    }

    public function create() {
        return fail("该功能暂未实现");
    }

    public function update($id) {
        return fail("该功能暂未实现");
    }

    public function delete($id) {
        return fail("该功能暂未实现");
    }

    /**
    * 数据创建后
    */
    protected function afterCreate($model)
    {
    }

    /**
    * 数据更新后
    */
    protected function afterUpdate($model, $oldModel)
    {
    }

}
